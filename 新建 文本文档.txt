                                                                                                                     10月9号
机械组-程一笑今天根据队长对于一二号小车可能需要磁吸连接的要求，对号车进行修改，具体上加装了后尾门，将小车顶部进行开窗处理，便于接收上方小球。下午机械组-程一笑与队长讨论小车的外观后，提出了制作圆形可旋转外壳的方案，对后续的小车设计有一定启发。

郑懿轩在单片机学习的入门阶段，我首先完成了两款核心工具的准备与学习——Keil5与STM32CubeMX，这两款软件的搭配使用，为后续的硬件开发搭建了高效的基础流程.
其中，Keil5（全称Keil uVision5）并非单纯的“烧录工具”，而是一套完整的嵌入式开发环境，核心功能覆盖代码编写、编译调试与程序下载三大环节。在实际操作中，我可以在其集成的编辑器里编写C语言代码，借助语法高亮、代码补全功能提升书写效率；编写完成后，通过内置的编译器将代码转换为单片机可识别的二进制文件（.hex或.bin格式）；最后连接调试器（如J-Link、ST-Link），将二进制文件烧录进STM32单片机，同时还能利用在线调试功能，设置断点、查看寄存器与变量值，快速定位代码中的逻辑错误，这对新手排查问题尤为关键。
而STM32CubeMX则是ST公司推出的可视化配置工具，完美解决了新手“不会写底层代码”的痛点。启动软件后，只需先选择对应的单片机型号（如STM32F103C8T6），再通过图形化界面勾选引脚功能——比如将PA4设为GPIO输入、PA5设为SPI输出，或配置定时器、串口等外设参数，软件便会自动生成标准化的初始化代码，包括时钟树配置、GPIO初始化函数、外设驱动框架等，且代码风格完全兼容HAL库。生成的代码可直接导入Keil5使用，无需手动编写复杂的寄存器操作语句，极大降低了嵌入式开发的入门门槛，让新手能更专注于上层功能逻辑的实现。


阳礼宇电控组第一天，今天的主要学习任务是学习单片机的基础知识。我了解到，单片机就像是我们机器车的“大脑”，它是一个微型计算机系统。
它的核心组成部分包括：中央处理器（CPU）、存储器（ROM和RAM）、输入/输出端口（I/O）以及定时/计数器等。这些部件集成在一块芯片上，共同协作。CPU负责执行程序指令，存储器用来存放代码和数据，而I/O口则是与外部传感器、电机等部件进行通信的桥梁。
通过今天的学习，我对这个核心控制器有了宏观的认识，为后续亲手编程控制小车打下了重要的理论基础。期待明天的学习与实践！

10月9日刘畅日志今天主要负责设计和讨论1号车的具体方案1号车负责接住好好先生释放的球，具体细化为占领高地中央位置，并且能实现1号和2号车之间小球的转移。方案一 铲子和麦轮通过类似机械臂的方式实现小球转移，并且通过麦轮运动。是最容易想到但效率低且对电控要求极高的一种方法，并且麦轮难以抵抗其他小车的挤压造成的运动轨道偏移，被放弃。方案二 阀门，履带和车身滚轮与方案一不同的是，这个方案的转移小球装置主体设置在2号上，2号位于高台边缘而1号紧贴高台底部，利用地形高度差，2号打开阀门使收集的小球自然滚下落入1号中，实现小球转移简单可行，且履带保证小车稳定性强，增加抢占高地时的优势。同时车身装有不停旋转的滚轮，可以在挤压时实现对手压力方向的偏移从而减少其影响目前履带的设计想法待定，若日后难以实现则仍然使用麦轮